
Assign1_Q1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000424  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a54  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002aa  00000000  00000000  00002a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00002d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000059  00000000  00000000  00002db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ea1  00000000  00000000  00002e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b58  00000000  00000000  0001acb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b6c3  00000000  00000000  0001b80a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a6ecd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000108  00000000  00000000  000a6f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a7018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000072  00000000  00000000  000a7037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000404 	.word	0x08000404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000404 	.word	0x08000404

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:

// Orange LED -- GPIOD pin 13.
//	1 -- Led On
//	0 -- Led Off

int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	uint32_t pin= 12;
 800021e:	230c      	movs	r3, #12
 8000220:	607b      	str	r3, [r7, #4]
	SystemInit();
 8000222:	f000 f86b 	bl	80002fc <SystemInit>
   RCC->AHB1ENR |= BV(3);
 8000226:	4b33      	ldr	r3, [pc, #204]	@ (80002f4 <main+0xdc>)
 8000228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800022a:	4a32      	ldr	r2, [pc, #200]	@ (80002f4 <main+0xdc>)
 800022c:	f043 0308 	orr.w	r3, r3, #8
 8000230:	6313      	str	r3, [r2, #48]	@ 0x30
   GPIOD->MODER &= ~BV((pin<<1) + 1);
 8000232:	4b31      	ldr	r3, [pc, #196]	@ (80002f8 <main+0xe0>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	687a      	ldr	r2, [r7, #4]
 8000238:	0052      	lsls	r2, r2, #1
 800023a:	3201      	adds	r2, #1
 800023c:	2101      	movs	r1, #1
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	43d2      	mvns	r2, r2
 8000244:	4611      	mov	r1, r2
 8000246:	4a2c      	ldr	r2, [pc, #176]	@ (80002f8 <main+0xe0>)
 8000248:	400b      	ands	r3, r1
 800024a:	6013      	str	r3, [r2, #0]
   GPIOD->MODER |= BV(pin<<1);
 800024c:	4b2a      	ldr	r3, [pc, #168]	@ (80002f8 <main+0xe0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	0052      	lsls	r2, r2, #1
 8000254:	2101      	movs	r1, #1
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a26      	ldr	r2, [pc, #152]	@ (80002f8 <main+0xe0>)
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
   GPIOD->OTYPER &= ~BV(pin);
 8000262:	4b25      	ldr	r3, [pc, #148]	@ (80002f8 <main+0xe0>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	2101      	movs	r1, #1
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	43d2      	mvns	r2, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a21      	ldr	r2, [pc, #132]	@ (80002f8 <main+0xe0>)
 8000274:	400b      	ands	r3, r1
 8000276:	6053      	str	r3, [r2, #4]
   GPIOD->OSPEEDR &= ~((BV((pin<<1) +1)) | BV(pin<<1));
 8000278:	4b1f      	ldr	r3, [pc, #124]	@ (80002f8 <main+0xe0>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	0052      	lsls	r2, r2, #1
 8000280:	3201      	adds	r2, #1
 8000282:	2101      	movs	r1, #1
 8000284:	4091      	lsls	r1, r2
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	2001      	movs	r0, #1
 800028c:	fa00 f202 	lsl.w	r2, r0, r2
 8000290:	430a      	orrs	r2, r1
 8000292:	43d2      	mvns	r2, r2
 8000294:	4611      	mov	r1, r2
 8000296:	4a18      	ldr	r2, [pc, #96]	@ (80002f8 <main+0xe0>)
 8000298:	400b      	ands	r3, r1
 800029a:	6093      	str	r3, [r2, #8]
   GPIOD->PUPDR &= ~((BV((pin<<1) +1)) | BV(pin<<1));
 800029c:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <main+0xe0>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	0052      	lsls	r2, r2, #1
 80002a4:	3201      	adds	r2, #1
 80002a6:	2101      	movs	r1, #1
 80002a8:	4091      	lsls	r1, r2
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	0052      	lsls	r2, r2, #1
 80002ae:	2001      	movs	r0, #1
 80002b0:	fa00 f202 	lsl.w	r2, r0, r2
 80002b4:	430a      	orrs	r2, r1
 80002b6:	43d2      	mvns	r2, r2
 80002b8:	4611      	mov	r1, r2
 80002ba:	4a0f      	ldr	r2, [pc, #60]	@ (80002f8 <main+0xe0>)
 80002bc:	400b      	ands	r3, r1
 80002be:	60d3      	str	r3, [r2, #12]

   while(1)
   {
	   GPIOD->BSRR |= BV(pin);
 80002c0:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <main+0xe0>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	2101      	movs	r1, #1
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	fa01 f202 	lsl.w	r2, r1, r2
 80002cc:	4611      	mov	r1, r2
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <main+0xe0>)
 80002d0:	430b      	orrs	r3, r1
 80002d2:	6193      	str	r3, [r2, #24]
	   DelayMs(1000);
 80002d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002d8:	f7ff ff76 	bl	80001c8 <DelayMs>
	   GPIOD->BSRR |= BV(28);
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <main+0xe0>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a05      	ldr	r2, [pc, #20]	@ (80002f8 <main+0xe0>)
 80002e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002e6:	6193      	str	r3, [r2, #24]
	   DelayMs(1000);
 80002e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ec:	f7ff ff6c 	bl	80001c8 <DelayMs>
	   GPIOD->BSRR |= BV(pin);
 80002f0:	bf00      	nop
 80002f2:	e7e5      	b.n	80002c0 <main+0xa8>
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020c00 	.word	0x40020c00

080002fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  DWT_Init();
 8000300:	f000 f802 	bl	8000308 <DWT_Init>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800030c:	4b14      	ldr	r3, [pc, #80]	@ (8000360 <DWT_Init+0x58>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a13      	ldr	r2, [pc, #76]	@ (8000360 <DWT_Init+0x58>)
 8000312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000316:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <DWT_Init+0x58>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a10      	ldr	r2, [pc, #64]	@ (8000360 <DWT_Init+0x58>)
 800031e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000322:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <DWT_Init+0x5c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0e      	ldr	r2, [pc, #56]	@ (8000364 <DWT_Init+0x5c>)
 800032a:	f023 0301 	bic.w	r3, r3, #1
 800032e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <DWT_Init+0x5c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <DWT_Init+0x5c>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <DWT_Init+0x5c>)
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000342:	bf00      	nop
    __ASM volatile ("NOP");
 8000344:	bf00      	nop
    __ASM volatile ("NOP");
 8000346:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000348:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <DWT_Init+0x5c>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	2b00      	cmp	r3, #0
 800034e:	bf0c      	ite	eq
 8000350:	2301      	moveq	r3, #1
 8000352:	2300      	movne	r3, #0
 8000354:	b2db      	uxtb	r3, r3
}
 8000356:	4618      	mov	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000edf0 	.word	0xe000edf0
 8000364:	e0001000 	.word	0xe0001000

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f7ff ffc6 	bl	80002fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff3d 	bl	8000218 <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b4:	20000020 	.word	0x20000020

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	@ (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	@ (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	@ (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
